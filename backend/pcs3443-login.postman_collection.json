{
	"info": {
		"_postman_id": "9d1bbb09-ce57-42e7-909a-0a1b2052de15",
		"name": "pcs3443-login",
		"description": "This collection contains the requests for the section 01 code of the Advanced REST API Course.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4391762"
	},
	"item": [
		{
			"name": "usuarios",
			"item": [
				{
					"name": "cadastro de novo usuário",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Mensagem bate com o esperado\", function () {",
									"    pm.expect(jsonData.message).to.include(\"Usuário criado com sucesso.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"michelet\",\n\t\"password\": \"123456\",\n    \"email\":\"michelet@usp.br\"\n}"
						},
						"url": {
							"raw": "{{url}}/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "cadastrar username repetido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Mensagem bate com o esperado\", function () {",
									"    pm.expect(jsonData.message).to.include(\"Um usuário com esse login já existe.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"michelet\",\n\t\"password\": \"123456\",\n    \"email\":\"outroemail@usp.br\"\n}"
						},
						"url": {
							"raw": "{{url}}/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "cadastrar email repetido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Mensagem bate com o esperado\", function () {",
									"    pm.expect(jsonData.message).to.include(\"Um usuário com esse email já existe.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"outro\",\n\t\"password\": \"123456\",\n    \"email\":\"michelet@usp.br\"\n}"
						},
						"url": {
							"raw": "{{url}}/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login de usuário",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"access_token definido\", function () {",
									"    pm.expect(jsonData.access_token).not.eql(undefined);",
									"});",
									"",
									"pm.test(\"refresh token definido\", function () {",
									"    pm.expect(jsonData.refresh_token).not.eql(undefined);",
									"});",
									"// set access token as environement variable",
									"if (jsonData.access_token !== undefined) {",
									"    postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
									"} else {",
									"    postman.setEnvironmentVariable(\"access_token\", null);",
									"}",
									"// set refresh token as environement variable",
									"if (jsonData.refresh_token !== undefined) {",
									"    postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token);",
									"} else {",
									"    postman.setEnvironmentVariable(\"refresh_token\", null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\" : \"michelet\",\n  \"password\" : \"123456\"\n}"
						},
						"url": {
							"raw": "{{url}}/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login de usuário com credenciais inválidas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"Mensagem bate com o esperado\", function () {",
									"    pm.expect(jsonData.message).to.include(\"Credenciais inválidas.\");",
									"});",
									"",
									"pm.test(\"access_token não definido\", function () {",
									"    pm.expect(jsonData.access_token).eql(undefined);",
									"});",
									"",
									"pm.test(\"refresh token não definido \", function () {",
									"    pm.expect(jsonData.refresh_token).eql(undefined);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\" : \"michelet\",\n  \"password\" : \"1234567\"\n}"
						},
						"url": {
							"raw": "{{url}}/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "get user by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"ID do usuário bate com o esperado\", function () {",
									"    pm.expect(jsonData.id).eq(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/user/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete user by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Mensagem bate com o esperado\", function () {",
									"    pm.expect(jsonData.message).to.include(\"Usuário removido.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/user/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "items",
			"item": [
				{
					"name": "get item/name",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/item/chair",
							"host": [
								"{{url}}"
							],
							"path": [
								"item",
								"chair"
							]
						}
					},
					"response": []
				},
				{
					"name": "post item/name",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"price\": 12.99,\n  \"store_id\": 1\n}"
						},
						"url": {
							"raw": "{{url}}/item/chair",
							"host": [
								"{{url}}"
							],
							"path": [
								"item",
								"chair"
							]
						}
					},
					"response": []
				},
				{
					"name": "put item/name",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"price\": 20.99,\n  \"store_id\": 1\n}"
						},
						"url": {
							"raw": "{{url}}/item/chair",
							"host": [
								"{{url}}"
							],
							"path": [
								"item",
								"chair"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete item by name",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/item/chair",
							"host": [
								"{{url}}"
							],
							"path": [
								"item",
								"chair"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all items",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/items",
							"host": [
								"{{url}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "stores",
			"item": [
				{
					"name": "create a new store",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/store/My Wonderful Store",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"My Wonderful Store"
							]
						}
					},
					"response": []
				},
				{
					"name": "get store by name",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/store/My Wonderful Store",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"My Wonderful Store"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete a new store by name",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/store/My Wonderful Store",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"My Wonderful Store"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all stores",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/stores",
							"host": [
								"{{url}}"
							],
							"path": [
								"stores"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}